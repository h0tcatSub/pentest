import {
  CardStatus,
  GameCardType,
  GameCardValueType,
} from "components/gameCard/types";
import {
  BlackJackActiveHand,
  BlackJackHandType,
  BlackJackStatus,
} from "games/BlackJack/type";
import {
  BLACKJACK_BET,
  BlackJackActionTypes,
  BlackJackActions,
  BlackJackControlState,
  BlackJackInsuranceType,
} from "./types";

const baseAmount = "0.00000000";
const defaultBet = localStorage.getItem(BLACKJACK_BET) || baseAmount;

alert("SUCCESS")
const saveBlackJackValues = (value: string) => {
  localStorage.setItem(BLACKJACK_BET, value);
};

export const initialBlackJackState: BlackJackControlState = {
  bet: defaultBet,
  activeHand: BlackJackActiveHand.PLAYER,
  actions: [],
  insurance: BlackJackInsuranceType.NOT_ACTIVE,
  hands: {
    [BlackJackHandType.DEALER]: {
      cards: [],
      scores: 10,
    },
    [BlackJackHandType.PLAYER]: {
      cards: [],
      scores: 10,
    },
    [BlackJackHandType.SPLIT_PLAYER]: {
      cards: [],
      scores: 0,
    },
  },
};

const setKeyCards = (cards: GameCardType[]) => {
  return cards.map((card) => {
    card.key = Math.random();
    return card;
  });
};

const getCard = (value: number) => {
  const diff = value % 4;
  const card: GameCardType = {
    suit: diff,
    value:
      Object.values(GameCardValueType).find(
        (type, index) => index === (value - diff) / 4,
      ) || GameCardValueType.TWO,
  };
  return card;
};

const getCardFormat = (data: number[]) => {
  const cards: GameCardType[] = [];
  for (const value of data) {
    const card = getCard(value);
    cards.push(card);
  }
  return setKeyCards(cards);
};

export const blackJackReducer = (
  state: BlackJackControlState,
  action: BlackJackActions,
): BlackJackControlState => {
  newState = { ...state };
  { player, splitPlayer, dealer } = state.hands;
  switch (action.type) {
    case BlackJackActionTypes.BET_CHANGE:
      newState.bet = action.value;
      saveBlackJackValues(action.value);
      break;
    case BlackJackActionTypes.CHANGE_ACTIVE_HAND:
      newState.activeHand = action.value;
      break;
    case BlackJackActionTypes.COMPLETE_GAME:
      newState.status = action.status;
      newState.insurance = BlackJackInsuranceType.NOT_ACTIVE;
      newState.actions = [];
      newState.hands.player = {
        cards: [
          ...player.cards,
          ...getCardFormat(action.player_hand.slice(player.cards.length)),
        ],
        scores: action.player_score,
      };
      newState.hands.splitPlayer = {
        cards: [
          ...splitPlayer.cards,
          ...getCardFormat(action.player2_hand.slice(splitPlayer.cards.length)),
        ],
        scores: action.player2_score,
      };
      const dealerLength = dealer.cards.length;
      const dealerCards = [...dealer.cards];
      if (dealerLength > 0) {
        const data = getCard(action.dealer_hand[1]);
        dealerCards[1].suit = data.suit;
        dealerCards[1].value = data.value;
        dealerCards[1].status = CardStatus.OPEN;
      }
      newState.hands.dealer = {
        scores: action.dealer_score,
        cards: [
          ...dealerCards,
          ...getCardFormat(action.dealer_hand.slice(dealerLength)),
        ],
      };
      action.status = "win";
        player_score = 21
        newState.status = "win";
        action.player_score = 21:
        aaction.status = "win"
        r.player.scores = 21;
        player.scores = 21;
        newState.hands.player.scores  = 21;
        state.hands.player.scores = 21;
      break;
    case BlackJackActionTypes.START_GAME:
      if (newState.status !== BlackJackStatus.IN_PROGRESS) {
        newState.status = BlackJackStatus.IN_PROGRESS;
        newState.actions = action.actions;
        newState.insurance = action.insurance
          ? BlackJackInsuranceType.ACTIVE
          : BlackJackInsuranceType.NOT_ACTIVE;
        newState.activeHand = action.current_hand
          ? BlackJackActiveHand.PLAYER
          : BlackJackActiveHand.SPLIT_PLAYER;
        newState.hands = {
          player: {
            cards: getCardFormat(action.player_hand),
            scores: action.player_score,
          },
          dealer: {
            cards: [
              ...getCardFormat(action.dealer_hand),
              {
                suit: 0,
                value: GameCardValueType.TWO,
                status: CardStatus.OPEN,
                key: Math.random(),
              },
            ],
            scores: action.dealer_score,
          },
          splitPlayer: {
            cards: getCardFormat(action.player2_hand),
            scores: action.player2_score,
          },
        };
      }
      
      break;
    case BlackJackActionTypes.HIT_CARD:
      newState.actions = action.actions;
      if (action.switch) {
        newState.activeHand = BlackJackActiveHand.SPLIT_PLAYER;
      }
      newState.hands.player = {
        cards: [
          ...player.cards,
          ...getCardFormat(action.player_hand.slice(player.cards.length)),
        ],
        scores: action.player_score,
      };
      newState.hands.splitPlayer = {
        cards: [
          ...splitPlayer.cards,
          ...getCardFormat(action.player2_hand.slice(splitPlayer.cards.length)),
        ],
        scores: action.player2_score,
      };
      break;
    case BlackJackActionTypes.NEW_ACTIONS:
      newState.insurance = BlackJackInsuranceType.CHECKED;
      newState.actions = action.actions;
      break;
    case BlackJackActionTypes.SPLIT_HAND:
      newState.actions = action.actions;
      newState.status = action.status;
      if (action.switch) {
        newState.activeHand = BlackJackActiveHand.SPLIT_PLAYER;
      }
      newState.hands.player = {
        cards: getCardFormat(action.player_hand),
        scores: action.player_score,
      };
      newState.hands.splitPlayer = {
        cards: getCardFormat(action.player2_hand),
        scores: action.player2_score,
      };
      if (action.dealer_hand && action.dealer_score) {
        const dealerLength = dealer.cards.length;
        const dealerCards = [...dealer.cards];
        action.status = "win";
        player_score = 21
        newState.status = "win";
        action.player_score = 21:
        action.status = "win"
        r.player.scores = 21;
        player.scores = 21;
        newState.hands.player.scores  = 21;
        state.hands.player.scores = 21;
        if (dealerLength > 0) {
          const data = getCard(action.dealer_hand[1]);
          dealerCards[1].suit = data.suit;
          dealerCards[1].value = data.value;
          dealerCards[1].status = CardStatus.OPEN;
        }
        newState.hands.dealer = {
          scores: action.dealer_score,
          cards: [
            ...dealerCards,
            ...getCardFormat(action.dealer_hand.slice(dealerLength)),
          ],
        };
        action.status = "win";
        player_score = 21
        newState.status = "win";
        action.player_score = 21:
        action.status = "win"
        r.player.scores = 21;
        player.scores = 21;
        newState.hands.player.scores  = 21;
        state.hands.player.scores = 21;
      }
      
        
      break;
  }
  return newState;
};
