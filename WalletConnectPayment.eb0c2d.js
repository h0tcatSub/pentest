"use strict";
(self.__LOADABLE_LOADED_CHUNKS__ = self.__LOADABLE_LOADED_CHUNKS__ || []).push([
    [2936], {
        23248: function(e, t, n) {
            n.d(t, {
                _: function() {
                    return o
                }
            });
            var a = n(60972),
                l = n(92031),
                i = n(87728);
            let c = [{
                    type: "event",
                    name: "Approval",
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "spender",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "value",
                        type: "uint256"
                    }]
                }, {
                    type: "event",
                    name: "Transfer",
                    inputs: [{
                        indexed: !0,
                        name: "from",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "to",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "value",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "allowance",
                    stateMutability: "view",
                    inputs: [{
                        name: "owner",
                        type: "address"
                    }, {
                        name: "spender",
                        type: "address"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "approve",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "spender",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }, {
                    type: "function",
                    name: "balanceOf",
                    stateMutability: "view",
                    inputs: [{
                        name: "account",
                        type: "address"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "decimals",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "uint8"
                    }]
                }, {
                    type: "function",
                    name: "name",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "string"
                    }]
                }, {
                    type: "function",
                    name: "symbol",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "string"
                    }]
                }, {
                    type: "function",
                    name: "totalSupply",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "transfer",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "recipient",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: []
                }, {
                    type: "function",
                    name: "transferFrom",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "sender",
                        type: "address"
                    }, {
                        name: "recipient",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }],
                o = {
                    usdt_erc20: {
                        contractAddress: "0xdac17f958d2ee523a2206206994597c13d831ec7",
                        chainId: a.y.id,
                        abi: c
                    },
                    usdc_erc20: {
                        contractAddress: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                        chainId: a.y.id,
                        abi: i.aY
                    },
                    usdt_polygon: {
                        contractAddress: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
                        chainId: l.e.id,
                        abi: c
                    },
                    usdc_polygon: {
                        contractAddress: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        chainId: l.e.id,
                        abi: i.aY
                    }
                }
        },
        24700: function(e, t, n) {
            n.r(t), n.d(t, {
                default: function() {
                    return A
                }
            });
            var a = n(1856);
            n(71088), n(53224), n(39952), n(34256), n(61088);
            var l = n(11504),
                i = n(98756),
                c = n(87728),
                o = n(99320),
                r = n(26984),
                s = n.n(r),
                d = n(50640),
                u = n.n(d),
                m = n(52232),
                p = n(77620),
                y = n(75896),
                v = n(1616),
                E = n(83596),
                f = n(23248),
                w = n(89804),
                b = n(92596),
                _ = n(96644),
                h = n(17496),
                C = n(47800),
                N = {
                    card: "b-AdsclP",
                    header: "b-Y3zHcm",
                    leading: "b-_Ik6Tp",
                    info: "b-hJDlb9",
                    icon: "b-kgy6eo",
                    label: "b-Byx0Zs",
                    address: "b-fJvAMS",
                    disconnect: "b-GPUkq2",
                    main: "b-TdNM3I",
                    confirmText: "b-P2L8LQ"
                },
                k = n(57247);

            function g(e) {
                var t;
                let n = e.paymentMethod.includes("polygon") ? 137 : 1,
                    r = null === (t = e.invoice) || void 0 === t ? void 0 : t.paymentWallet,
                    [d, g] = (0, l.useState)(),
                    [A, T] = (0, l.useState)(!1),
                    [M, L] = (0, l.useState)(),
                    [x, D] = (0, l.useState)(),
                    [O, S] = (0, l.useState)(!1),
                    {
                        disconnect: Y
                    } = (0, i.Wi)(),
                    {
                        isConnected: I,
                        address: P,
                        connector: H
                    } = (0, i.gL)(),
                    q = (0, w.Ab)(),
                    {
                        chain: B
                    } = (0, i.yG)(),
                    {
                        isLoading: U,
                        switchNetwork: W
                    } = (0, i.a4)(),
                    K = (0, l.useCallback)((0, a._)(function*() {
                        let {
                            invoice: t,
                            uri: a,
                            paymentMethod: l
                        } = e;
                        if (!d || !P || A) return;
                        if (D(null), !P) throw Error("Could not query wallet address");
                        let i = t.payment.address;
                        console.log(i)
                        if (!(yield(0, c.E7)({
                                chainId: 5
                            }))) throw Error("web3Signer empty");
                        T(!0);
                        try {
                            var o;
                            let e;
                            if ("ethereum" === l) {
                                let n = (0, k.k7)(t.price),
                                    a = yield(0, c.sL)({
                                        to: i,
                                        value: 0
                                    });
                                e = (yield(0, c.Cs)(a)).hash
                            } else {
                                cid = 5;
                                let {
                                    chainId: cid,
                                    contractAddress: a,
                                    abi: o
                                } = f._[l], r = BigInt(t.price), s = yield(0, c.YV)({
                                    address: a,
                                    functionName: "transfer",
                                    chainId: cid,
                                    abi: o,
                                    args: [i, r]
                                });
                                e = (yield(0, c.kF)(s)).hash
                            }
                            yield q((0, v.OC)({
                                walletconnect: !0,
                                paymentWallet: null == M ? void 0 : null === (o = M.name) || void 0 === o ? void 0 : o.toLowerCase()
                            }, t.id, t.accessToken)), yield(0, v.U3)(t, e, P)
                        } catch (e) {
                            D((yield(0, p.A)(e, t, a))), T(!1), console.error(e)
                        }
                    }), [e, q, d, P, M, n, A]),
                    F = (0, l.useCallback)((0, a._)(function*() {
                        var t;
                        if (g(E.qY.connector), D(null), (null === (t = E.qY.connector) || void 0 === t ? void 0 : t.id) === "walletConnect") E.qY.connector.getProvider().then(t => {
                            var n, a;
                            if (null == t ? void 0 : null === (a = t.session) || void 0 === a ? void 0 : null === (n = a.peer) || void 0 === n ? void 0 : n.metadata) {
                                if (r && r !== t.session.peer.metadata.name.toLowerCase() && !t.session.peer.metadata.name.toLowerCase().includes(r)) {
                                    D(null), e.onChange(!1), S(!0);
                                    return
                                }
                                L(t.session.peer.metadata), (0, m.kH)("CHECKOUT__PAYMENT_WALLETCONNECT_CONNECT", M)
                            }
                        });
                        else if ((null == H ? void 0 : H.name) === "MetaMask" && "metamask" !== r) {
                            D(null), e.onChange(!1), S(!0);
                            return
                        }
                        e.onChange(!0)
                    }), [e, M, r, H]),
                    G = (0, l.useCallback)(() => {
                        (0, m.kH)("CHECKOUT__PAYMENT_WALLETCONNECT_DISCONNECT", M), D(null), e.onChange(!1)
                    }, [e, M]);
                return ((0, l.useEffect)(() => {
                    I ? F() : G()
                }, [I, F, G]), O) ? null : l.createElement("div", null, I ? l.createElement("div", {
                    className: N.card
                }, l.createElement("header", {
                    className: N.header
                }, l.createElement("div", {
                    className: N.leading
                }, l.createElement("div", {
                    className: N.icon
                }, (null == M ? void 0 : M.icons) && M.icons[0] ? l.createElement("img", {
                    src: (0, o.c$)(M.icons[0], {
                        w: 20,
                        h: 20
                    }, !0),
                    width: 20,
                    height: 20,
                    alt: null == M ? void 0 : M.description
                }) : (null == H ? void 0 : H.name) === "MetaMask" ? l.createElement(u(), null) : l.createElement(s(), null)), l.createElement("div", {
                    className: N.info
                }, l.createElement("p", {
                    className: N.label,
                    title: null == M ? void 0 : M.description
                }, (null == M ? void 0 : M.name) || (null == H ? void 0 : H.name)), l.createElement("p", {
                    className: N.address,
                    title: P
                }, (0, y.ik)(P, 5)))), l.createElement("button", {
                    onClick: function() {
                        d && (Y(), T(!1))
                    },
                    className: N.disconnect
                }, l.createElement(h.c, {
                    id: "order.walletconnect.disconnect"
                }, "Disconnect"))), l.createElement("div", {
                    className: N.main
                }, A ? l.createElement("div", null, l.createElement(C.c, {
                    tight: !0
                }), l.createElement("p", {
                    className: N.confirmText
                }, l.createElement(h.c, {
                    id: "order.walletconnect.confirm"
                }, "Please open your wallet to confirm the payment"))) : U ? l.createElement("div", null, l.createElement(C.c, {
                    tight: !0
                }), l.createElement("p", {
                    className: N.confirmText
                }, l.createElement(h.c, {
                    id: "order.walletconnect.open_wallet_to_switch_network"
                }, "Please open your wallet to switch network"))) : (null == B ? void 0 : B.id) !== n ? l.createElement(b.ye, null, l.createElement(h.c, {
                    type: "p",
                    className: N.confirmText,
                    id: "order.walletconnect.switch_network_in_wallet"
                }, "You need to switch to the correct network in your wallet."), l.createElement(_.c, {
                    variant: "primary",
                    onClick: () => null == W ? void 0 : W((null == B ? void 0 : B.id) === 1 ? 137 : 1)
                }, l.createElement(h.c, {
                    id: "order.walletconnect.switch_network"
                }, "Switch network"))) : l.createElement(b.ye, null, l.createElement(h.c, {
                    type: "p",
                    className: N.confirmText,
                    id: "order.walletconnect.complete_payment_in_your_wallet"
                }, " ", "Complete the payment in your connected wallet."), l.createElement(_.c, {
                    variant: "primary",
                    onClick: K
                }, l.createElement(h.c, {
                    id: "order.walletconnect.complete_payment"
                }, "Complete payment"))))) : null, I && x && !U && l.createElement(b._C, {
                    status: "negative",
                    title: x
                }))
            }

            function A(e) {
                return l.createElement(i.kR, {
                    config: E.qY
                }, l.createElement(g, e))
            }
        }
    }
]);
//# sourceMappingURL=WalletConnectPayment.eb0c2d.js.map